<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custo Benefício de Pizzas</title>
    <style>

        body {
            background-color: #eeeeee;
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        }

        h1 {
            text-align: center;
        }

        fieldset {
            width: 23%;
            margin: 0 auto;
            background-color: #cccccc;
            font-size: 18px;
        }

        legend {
            font-size: 20px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        fieldset input {
            width: 95%;
        }

        table {
            min-width: 40%;
            margin: 50px auto 0 auto;
            border: 1px solid;
            font-size: 18px;
        }

        table caption {
            font-weight: bold;
        }

        .clTitle td {
            font-weight: bold; 
            background-color: #cccccc;
        }

        td {
            border: 1px solid;
            padding: 5px 20px 2px 5px;
            width: fit-content;
            background-color: white;
        }

    </style>
</head>
<body>

    <h1>Gerador de Relatório de Custo Benefício de Pizzas</h1>

    <fieldset>
        <legend>Cadastro de Pizzas</legend>

        <label for="idFieldPizzaName">Nome do tamanho da pizza:</label> <br>
        <input type="text" id="idFieldPizzaName" name="nmFieldPizzaName">
        <br><br>

        <label for="idFieldPizzaSize">Tamanho da pizza (cm²):</label> <br>
        <input type="number" id="idFieldPizzaSize" name="nmFieldPizzaSize" min="1">
        <br><br>

        <label for="idFieldPizzaPrice">Preço da pizza em Reais (R$):</label> <br>
        <input type="number" id="idFieldPizzaPrice" name="nmFieldPizzaPrice" min="0">
        <br><br>

        <output id="idFieldMessage"></output>
        <br><br>

        <button type="button" id="idBtnRegister">Cadastrar</button>

        <button type="button" id="idBtnNewReport">Novo Relatório</button>
    </fieldset>

    <div id="idSectionReport">

    </div>

    <script>

        /*Declaração das variáveis que pegam os campos que recebem as informações*/
        var fieldPizzaName = document.getElementById("idFieldPizzaName");
        var fieldPizzaSize = document.getElementById("idFieldPizzaSize");
        var fieldPizzaPrice = document.getElementById("idFieldPizzaPrice");

        /*Declaração da variável que recebem as mensagem de instrução ao usuário*/
        var fieldMessage = document.getElementById("idFieldMessage");

        /*Declaração dos arrays para armazenar as informações que irão ser impressas no relatório 
        e do contador de index para adicionar na posição do array*/
        var pizzaNameList = [];
        var pizzaSizeList = [];
        var pizzaPriceList = [];
        var indexCounter = 0;

        /*Declaração das variáveis para armazenar as informações dos cálculos que posteriormente serão exibidas no relatório*/
        var pizzaPricePerCentimeterList = [];
        var pizzaPercentageDifferencePrice = [];

        /*Declaração da variáveis que pegam os botões de cadastro e de gerar relatório*/
        var btnRegister = document.getElementById("idBtnRegister");
        var btnNewReport = document.getElementById("idBtnNewReport");

        /*Event Listener que monitora a ação de click nos botões de cadastro e chamam a sua respectiva função*/
        btnRegister.addEventListener("click", registerPizza);
        btnNewReport.addEventListener("click", newReport);

        /*Função para criar um novo relatório resetando todos os valores dos arrays, deletar a tabela existente caso tenha uma tabela, 
        zerar os valores no campos e emitir uma mensagem informando ao usuário que um novo relatório pode ser preenchido*/
        function newReport() {

            var reportTable = document.getElementById("idTableReport")

            if (reportTable) {
                reportTable.remove();
            }
            
            pizzaNameList = [];
            pizzaSizeList = [];
            pizzaPriceList = [];
            pizzaPricePerCentimeterList = [];
            pizzaPercentageDifferencePrice = [];
            indexCounter = 0;

            fieldPizzaName.value = "";
            fieldPizzaSize.value = "";
            fieldPizzaPrice.value = "";
            fieldMessage.value = "Um novo relatório já pode ser preenchido"
            fieldPizzaName.focus();
        }

        /*Função para criar a tabela do relatório que será exibido para o usuário*/
        function createTableReport() {

            orderPizzaByCostBenefit();

            var reportTable = document.getElementById("idTableReport")

            if (reportTable) {
                reportTable.remove();
            }
           
            var table = document.createElement('table');
            var legend = document.createElement('caption');
            var thead = document.createElement('thead');
            var tbody = document.createElement('tbody');
            var titlesRow = thead.insertRow(0);
            
            
            table.id = "idTableReport";
            legend.innerHTML = "Relatório de Custo Benefício de Pizzas"
            titlesRow.classList.add("clTitle");
            titlesRow.insertCell(0).innerHTML = "Nome";
            titlesRow.insertCell(1).innerHTML = "Tamanho (cm)";
            titlesRow.insertCell(2).innerHTML = "Preço";
            titlesRow.insertCell(3).innerHTML = "R$/cm²";
            titlesRow.insertCell(4).innerHTML = "Diferença (%)";

            thead.appendChild(titlesRow);
            table.appendChild(legend);

            /*For para atribuir os respectivos valores do array para cada coluna da tabela na mesma linha*/
            for (let index = 0; index < pizzaNameList.length; index++) {
                
                var infosRow = tbody.insertRow(index);

                infosRow.insertCell(0).innerHTML = pizzaNameList[index];
                infosRow.insertCell(1).innerHTML = pizzaSizeList[index] + " cm";
                infosRow.insertCell(2).innerHTML = "R$" + pizzaPriceList[index];
                infosRow.insertCell(3).innerHTML = "R$" + pizzaPricePerCentimeterList[index] + "/cm²";
                if (index == 0) {
                    infosRow.insertCell(4).innerHTML = pizzaPercentageDifferencePrice[index];
                } else {
                    infosRow.insertCell(4).innerHTML = "+" + pizzaPercentageDifferencePrice[index] + "%";
                }

                tbody.appendChild(infosRow);
            }

            table.appendChild(thead);
            table.appendChild(tbody);
            document.getElementById("idSectionReport").appendChild(table);

        }

        /*Função para calcular a diferença de percentual entre a pizza com melhor custo beneficio e as demais pizzas*/
        function calculatePercentageDifference() {
            
            var bestCostBenefit = 0;
            var percentageDifference = 0;

            for (let index = 0; index < pizzaPricePerCentimeterList.length; index++) {
                
                /*Para o valor de index igual a zero pega o valor da pizza com melhor custo beneficio, para nos próximos valores do index
                realizar os cálculos de diferença percentual nos preços das pizzas*/
                if (index == 0) {
                    bestCostBenefit = pizzaPricePerCentimeterList[index];
                    pizzaPercentageDifferencePrice[index] = "Melhor Custo Benefício";
                } else {
                    percentageDifference = ((pizzaPricePerCentimeterList[index] * 100) / bestCostBenefit) - 100;
                    pizzaPercentageDifferencePrice[index] = percentageDifference.toFixed(2);
                }
            }
        }

        /*Função para ordenar a lista pizzaPricePerCentimeterList do melhor custo beneficio para o pior, e alterar a posição das informações
        nos demais arrays, onde os valores para nome, tamanho e preço irão estar na mesma posição do seu respectivo custo beneficio*/
        function orderPizzaByCostBenefit() {

            calculateCostBenefit();

            /*Variaveis para receber as informações de acordo com o index selecionado*/
            var bestCostBenefit = 0;
            var name = "";
            var size = 0;
            var price = 0;
            var indexPosition = 0;
            var counter = 0;

            for (let index = counter; index < pizzaPricePerCentimeterList.length; index++) {
                
                /*For para pegar os valores e o index do melhor custo beneficio, nome, tamanho e preço na respectiva posição*/
                for (let index = counter; index < pizzaPricePerCentimeterList.length; index++) {
                    if (index == counter) {
                        bestCostBenefit = Number(pizzaPricePerCentimeterList[index]);
                        name = pizzaNameList[index];
                        size = pizzaSizeList[index];
                        price = pizzaPriceList[index];
                        indexPosition = index;
                    } else {
                        if (pizzaPricePerCentimeterList[index] < bestCostBenefit) {
                            bestCostBenefit = Number(pizzaPricePerCentimeterList[index]);
                            name = pizzaNameList[index];
                            size = pizzaSizeList[index];
                            price = pizzaPriceList[index];
                            indexPosition = index;
                        }
                    }   
                    
                }
                /*Remove o valor no index selecionado para poder fazer o realocamento de posição*/
                pizzaPricePerCentimeterList.splice(indexPosition, 1);
                pizzaNameList.splice(indexPosition, 1);
                pizzaSizeList.splice(indexPosition, 1);
                pizzaPriceList.splice(indexPosition, 1);

                /*Realiza a reordenação dos itens do array, colocando os valores na posição + 1*/
                for (let index = pizzaPricePerCentimeterList.length; index > counter; index--) {
                    pizzaPricePerCentimeterList[index] = pizzaPricePerCentimeterList[(index - 1)];
                    pizzaNameList[index] = pizzaNameList[(index - 1)];
                    pizzaSizeList[index] = pizzaSizeList[(index - 1)];
                    pizzaPriceList[index] = pizzaPriceList[(index - 1)];
                }

                /*Após os itens serem realocados para a próxima posição, os valores armazenados nas variáveis bestcostBenefit, name, size e price
                 são realocados na primeira posição disponível, pois o counter começa adicionando na posição 0, porém no próximo loop irá 
                 realocar na casa 1 e assim por diante até passar por todo o array*/
                pizzaPricePerCentimeterList[index] = bestCostBenefit;
                pizzaNameList[index] = name;
                pizzaSizeList[index] = size;
                pizzaPriceList[index] = price;
                counter++;
            }

            calculatePercentageDifference();

        }

        /*Função para calcular o custo benefício da pizza em cm quadrado*/
        function calculateCostBenefit() {
            
            for (let index = 0; index < pizzaSizeList.length; index++) {
                /*Calcula o raio da pizza dividindo o tamanho por 2*/
                var radius = (pizzaSizeList[index] / 2);

                /*Calcula a área da pizza de acordo com a fórmula de cálculo da área de um circulo*/
                var area = Math.PI * Math.pow(radius, 2);

                /*Calcula o custo beneficio dividindo o preço pela área da pizza e atribui o valor ao Array */
                pizzaPricePerCentimeterList[index] = Number((pizzaPriceList[index] / area)).toFixed(3);
            }

        }

        /*Função para atribuir as informações cadastradas no fieldset de cadastro de pizzas aos seus respectivos arrays,
        a var checkingFields verifica se os campos foram todos preenchidos retornando true or false, no caso de false é emitida
        uma mensagem informando qual campo não está preenchido, no caso de true é feito um novo filtro verificando se as informações
        preenchidas são válidas, sendo a resposta positiva as informações são atribuidas ao array*/
        function registerPizza() {

            var checkingFields = ((fieldPizzaName.value != "") && (fieldPizzaSize.value != "") && (fieldPizzaPrice.value != ""));
            var isResgitered = false;

            if (checkingFields) {

                if (fieldPizzaSize.value <= 0) {
                    fieldMessage.value = "Por favor informe um tamanho válido (Obs.: Um valor maior que zero)";
                    fieldPizzaSize.focus();
                } else if (fieldPizzaPrice.value <= 0) {
                    fieldMessage.value = "Por favor informe um um preço válido (Obs.: Um valor maior que R$0)";
                    fieldPizzaPrice.focus();
                } else {

                    /*Se o tamanho e o preço da pizza no mesmo index do array forem iguais as informações cadastradas pelo usuário
                    nos respectivos campos a var isRegistered retorna true, onde na sequência do código irá ser emitida uma mensagem
                    informando o usuário que essas informações já foram cadastradas*/
                    for (let index = 0; index < pizzaNameList.length; index++) {
                        if ((pizzaSizeList[index] == Number(fieldPizzaSize.value).toFixed(2)) && (pizzaPriceList[index] == Number(fieldPizzaPrice.value).toFixed(2))) {
                            isResgitered = true; 
                        }
                    }

                    if (isResgitered) {
                        fieldMessage.value = "Uma pizza com o mesmo tamanho e preço já foi cadastrada no sistema";
                        fieldPizzaName.focus();
                    } else {
                        pizzaNameList[indexCounter] = fieldPizzaName.value;
                        pizzaSizeList[indexCounter] = Number(fieldPizzaSize.value).toFixed(2);
                        pizzaPriceList[indexCounter] = Number(fieldPizzaPrice.value).toFixed(2);
                        indexCounter++;
                        fieldPizzaName.value = "";
                        fieldPizzaSize.value = "";
                        fieldPizzaPrice.value = "";
                        fieldPizzaName.focus();
                        fieldMessage.value = "Pizza cadastrada com sucesso!";
                        createTableReport();

                        setTimeout(() => {
                            fieldMessage.value = ""; 
                        }, 2000);
                    }        
                }

            } else {

                if (fieldPizzaPrice.value == "") {
                    fieldMessage.value = "Por favor informe o preço da pizza";
                    fieldPizzaPrice.focus();
                }

                if (fieldPizzaSize.value == "") {
                    fieldMessage.value = "Por favor informe o tamanho da pizza";
                    fieldPizzaSize.focus();
                }

                if (fieldPizzaName.value == "") {
                    fieldMessage.value = "Por favor informe o nome da pizza";
                    fieldPizzaName.focus();
                }

            }
        }

    </script>

    
</body>
</html>